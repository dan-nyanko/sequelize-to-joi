'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findAndConvertModels = findAndConvertModels;
exports.default = sequelizeToJoi;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

var _sequelize = require('sequelize');

var _sequelize2 = _interopRequireDefault(_sequelize);

var _map = require('./map');

var _map2 = _interopRequireDefault(_map);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findAndConvertModels(object, options) {
    _lodash2.default.forIn(object, function (value, key) {
        if (value.hasOwnProperty('prototype') && value.prototype instanceof _sequelize2.default.Model) {
            object[key] = sequelizeToJoi(value, options);
        } else if (_lodash2.default.isArray(value) && _lodash2.default.first(value).hasOwnProperty('prototype') && _lodash2.default.first(value).prototype instanceof _sequelize2.default.Model) {
            object[key] = _joi2.default.array().items(sequelizeToJoi(_lodash2.default.first(value), options));
        } else if (_lodash2.default.isObject(value)) {
            object[key] = findAndConvertModels(value, options);
        }
    });

    return object;
}

function sequelizeToJoi(model) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$omitAssociations = _ref.omitAssociations,
        omitAssociations = _ref$omitAssociations === undefined ? false : _ref$omitAssociations,
        _ref$omitAutoGenerate = _ref.omitAutoGenerated,
        omitAutoGenerated = _ref$omitAutoGenerate === undefined ? false : _ref$omitAutoGenerate;

    // Ensure that the model we receive is a Sequelize Model
    if (model.hasOwnProperty('prototype') && !(model.prototype instanceof _sequelize2.default.Model)) {
        throw new TypeError('model is not an instance of Sequelize.Model');
    }

    // The validator for the Sequelize model
    var joi = _joi2.default.object();

    // Figure out what attributes we are mapping to create the validation schema
    var attributes = model.attributes;

    if (omitAutoGenerated) {
        attributes = _lodash2.default.omitBy(attributes, '_autoGenerated');
    }

    // The keys we parsed out of the model
    var keys = _lodash2.default.mapValues(attributes, _map2.default);

    if (!omitAssociations) {
        _lodash2.default.each(model.associations, function (reference, name) {
            // Only go one level deep to avoid circular references
            var schema = sequelizeToJoi(reference.target, { omitAssociations: true, omitAutoGenerated: omitAutoGenerated });

            if (reference.isSingleAssociation) {
                keys[name] = schema;
            } else {
                keys[name] = _joi2.default.array().items(schema);
            }
        });
    }

    return joi.keys(keys);
}